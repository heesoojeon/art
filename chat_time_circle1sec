import sys
from PyQt5.QtWidgets import QApplication, QWidget
from PyQt5.QtGui import QPainter, QColor, QPen
from PyQt5.QtCore import Qt
import time

class MyWidget(QWidget):

    def __init__(self):
        super().__init__()
        self.setGeometry(100, 100, 400, 400)
        self.setWindowTitle('Circle and Dot')

    def paintEvent(self, event):
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)
        pen = QPen(QColor(0, 0, 0))
        pen.setWidth(2)
        painter.setPen(pen)

        # Draw a circle
        painter.drawEllipse(50, 50, 300, 300)

        # Draw dots around the circle with a delay
        delay = 1  # seconds
        num_dots = 20
        for i in range(num_dots):
            angle = 2 * i * 3.14159 / num_dots
            x = 200 + 150 * (0.9 * angle + 0.1 * angle ** 3)
            y = 200 - 150 * (0.9 * angle - 0.1 * angle ** 3)
            self.drawDot(painter, x, y)
            time.sleep(delay)

    def drawDot(self, painter, x, y):
        painter.setBrush(QColor(0, 0, 0))
        painter.drawEllipse(x - 5, y - 5, 10, 10)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    widget = MyWidget()
    widget.show()
    sys.exit(app.exec_())
#This code is very similar to the previous example, 
# with the main difference being the use of the time module to add a 1-second delay between each dot. 
# The delay variable sets the delay between each dot, in seconds, 
# and the time.sleep method is used to pause the program for the specified amount of time.


#Note that using time.sleep in the main GUI thread can cause the GUI to freeze and become unresponsive. 
# In this example, the delay is short enough that it's not noticeable, 
# but for longer delays or more complex programs, it's better to use a separate thread or the QTimer.singleShot method to avoid freezing the GUI.