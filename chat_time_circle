import math, sys
from PyQt5.QtWidgets import QApplication, QWidget
from PyQt5.QtGui import QPainter, QColor, QPen
from PyQt5.QtCore import Qt, QThread, QTimer

class MyWidget(QWidget):

    def __init__(self):
        super().__init__()
        self.setGeometry(100, 100, 400, 400)
        self.setWindowTitle('Circle and Dot')

    def paintEvent(self, event):
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)
        pen = QPen(QColor(0, 0, 0))
        pen.setWidth(2)
        painter.setPen(pen)

        # Draw a circle
        painter.drawEllipse(50, 50, 300, 300)

        # Draw dots around the circle with a delay
        delay = 300  # milliseconds
        num_dots = 20
        for i in range(num_dots):
            angle = 2 * i * 3.14159 / num_dots
            x = 200 + 150 * (0.9 * angle + 0.1 * angle ** 3)
            y = 200 - 150 * (0.9 * angle - 0.1 * angle ** 3)
            QTimer.singleShot(i * delay, lambda x=x, y=y: self.drawDot(painter, x, y))

    def drawDot(self, painter, x, y):
        painter.setBrush(QColor(0, 0, 0))
        painter.drawEllipse(x - 5, y - 5, 10, 10)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    widget = MyWidget()
    widget.show()
    sys.exit(app.exec_())
#This code creates a QWidget object called MyWidget and overrides its paintEvent method to draw a circle and dots using a QPainter object. 
# The setRenderHint method is used to enable antialiasing for smoother drawing, 
# and the setPen method is used to set the pen color and width for drawing the circle. The drawEllipse method is used to draw the circle.
#The drawDot method is used to draw a single dot at a given location, 
# and is called by the paintEvent method with a delay using the QTimer.singleShot method. 
# The setBrush method is used to set the brush color for drawing the dot.
#The delay variable sets the delay between each dot, in milliseconds, and the num_dots variable sets the number of dots to draw. 
# The angle variable calculates the angle of each dot around the circle, 
# and the x and y variables calculate the coordinates of each dot using a mathematical formula.
#Finally, the QApplication object is created, and the MyWidget object is shown and the application is executed with app.exec_().